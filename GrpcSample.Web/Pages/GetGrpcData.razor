@page "/get-grpc-data"
@using GrpcSample.Web.Data
@using Duplex;
@using Grpc.Core;
@using System;
@using System.Threading;
@using System.Threading.Tasks;

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (grpcData == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Key</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in grpcData)
            {
                <tr>
                    <td>@item.Key</td>
                    <td>@item.Value</td>
                </tr>
            }
        </tbody>
    </table>
}

@functions {
    Dictionary<string, string> grpcData;

    //protected override async Task OnInitAsync()
    //{
    //    grpcData = new Dictionary<string, string>();
    //    var result = Task.Run(async () =>
    //    {
    //        while (true)
    //        {
    //            grpcData.Add(Guid.NewGuid().ToString(), "2");
    //            base.Invoke(StateHasChanged);
    //            Thread.Sleep(1000);
    //            Console.WriteLine("123");
    //        }
    //    });

    //}


    protected override async Task OnInitAsync()
    {
        Console.WriteLine($"Blazor Init");

        grpcData = new Dictionary<string, string>();

        var name = "BlazorClient";


        var port = "50051";

        var channel = new Channel("localhost:" + port, ChannelCredentials.Insecure);//, channelCredentials);
        var client = new Messaging.MessagingClient(channel);

        var duplex = client.SendData();

        //using ()
        //{
        Console.WriteLine($"Connected as {name}. Send empty message to quit.");

        
        // Dispatch, this could be racy
        var responseTask = Task.Run(async () =>
        {

            //var aa = await duplex.ResponseStream.MoveNext(CancellationToken.None);
            while (await duplex.ResponseStream.MoveNext(CancellationToken.None))
            {
                grpcData.Add(Guid.NewGuid().ToString(), duplex.ResponseStream.Current.Message);
                Console.WriteLine($"{duplex.ResponseStream.Current.Name}: {duplex.ResponseStream.Current.Message}");
                base.Invoke(StateHasChanged);
            }


        });

        await duplex.RequestStream.WriteAsync(new MyMessage { Name = name, Message = "" });

        //var line = Console.ReadLine();
        //while (!string.IsNullOrEmpty(line))
        //{
        //    await duplex.RequestStream.WriteAsync(new MyMessage { Name = name, Message = line });
        //    line = Console.ReadLine();
        //}
        //await duplex.RequestStream.CompleteAsync();
        //}

        //Console.WriteLine("Shutting down");
        //await channel.ShutdownAsync();
        //Console.WriteLine("Press any key to exit...");
        //Console.ReadKey();
    }
}
